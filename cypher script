LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/minhnhatdanchoi/dataset/0326139bddae88c1f02b83b9d22cff39595a8818/program.csv' AS row
WITH row, {languages: apoc.text.replace(apoc.text.replace(row.Languages, "None", "null"), "'", "\""), program: apoc.text.replace(apoc.text.replace(row.`Programing Language`, "None", "null"), "'", "\""), tool: apoc.text.replace(apoc.text.replace(row.Tool, "None", "null"), "'", "\""), autotool: apoc.text.replace(apoc.text.replace(row.`Automation/Orchestration tool`, "None", "null"), "'", "\""), microservice: apoc.text.replace(apoc.text.replace(row.Microservice, "None", "null"), "'", "\""), os: apoc.text.replace(apoc.text.replace(row.OS, "None", "null"), "'", "\""), database: apoc.text.replace(apoc.text.replace(row.Database, "None", "null"), "'", "\""), cloud: apoc.text.replace(apoc.text.replace(row.`Public Cloud`, "None", "null"), "'", "\"")} AS transformed // Convert the JSON string to a map
WITH row, transformed.languages AS langJson, transformed.program AS programJson, transformed.tool AS toolJson, transformed.autotool AS autotoolJson, transformed.microservice AS microserviceJson, transformed.os AS osJson, transformed.database AS databaseJson, transformed.cloud AS cloudJson
WITH row, apoc.convert.fromJsonMap(langJson) AS langMap, apoc.convert.fromJsonMap(programJson) AS programMap, apoc.convert.fromJsonMap(toolJson) AS toolMap, apoc.convert.fromJsonMap(autotoolJson) AS autotoolMap, apoc.convert.fromJsonMap(microserviceJson) AS microserviceMap, apoc.convert.fromJsonMap(osJson) AS osMap, apoc.convert.fromJsonMap(databaseJson) AS databaseMap, apoc.convert.fromJsonMap(cloudJson) AS cloudMap
MERGE (e:Employee {name: row.Name})
  ON CREATE SET e.nationality = row.Nationality, e.sex = row.Sex, e.dob = row.DOB, e.sen = row.Seniority // Create Nationality node and relationship
MERGE (n:Nationality {name: row.Nationality})
MERGE (e)-[:HAS_NATIONALITY]->(n) // Create Sex node and relationship
MERGE (s:Sex {type: row.Sex})
MERGE (e)-[:HAS_SEX]->(s)
FOREACH (_ IN
CASE
  WHEN row.Seniority IS NOT NULL AND TRIM (row.Seniority) <> "" THEN [1]
  ELSE []
END |
MERGE (sen:Seniority {name: row.Seniority})
MERGE (e)-[:HAS_SENIORITY]->(sen)) /////////////////////////////////////
// Xử lý cột Languages
WITH row, e, langMap, programMap, toolMap, autotoolMap, microserviceMap, osMap, databaseMap, cloudMap
UNWIND keys(langMap) AS lang
MERGE (l:Language {name: lang})
MERGE (e)-[:LANGUAGE]->(l)
WITH e, l, lang, langMap[lang] AS lvlValue, programMap, toolMap, autotoolMap, microserviceMap, osMap, databaseMap, cloudMap
FOREACH (_ IN
CASE
  WHEN lvlValue IS NOT NULL AND lvlValue <> "" THEN [1]
  ELSE []
END |
MERGE (lev:Level {name: lvlValue})
MERGE (l)-[:HAS_LEVEL]->(lev)
MERGE (e)-[:HAS_LANGUAGE_LEVEL {language: lang}]->(lev)) /////////////////////////////////////
// Xử lý cột Programing Language
WITH e, programMap, toolMap, autotoolMap, microserviceMap, osMap, databaseMap, cloudMap
UNWIND keys(programMap) AS prog
MERGE (pl:ProgramingLanguage {name: prog})
MERGE (e)-[:PROGRAM_LANGUAGE]->(pl)
WITH e, pl, prog, programMap[prog] AS lvlValue, toolMap, autotoolMap, microserviceMap, osMap, databaseMap, cloudMap
FOREACH (_ IN
CASE
  WHEN lvlValue IS NOT NULL AND lvlValue <> "" THEN [1]
  ELSE []
END |
MERGE (lev:Level {name: lvlValue})
MERGE (pl)-[:HAS_LEVEL]->(lev)) /////////////////////////////////////
// Xử lý cột Tool
WITH e, toolMap, autotoolMap, microserviceMap, osMap, databaseMap, cloudMap
UNWIND keys(toolMap) AS toolName
MERGE (t:Tool {name: toolName})
MERGE (e)-[:TOOL]->(t)
WITH e, t, toolName, toolMap[toolName] AS lvlValue, autotoolMap, microserviceMap, osMap, databaseMap, cloudMap
FOREACH (_ IN
CASE
  WHEN lvlValue IS NOT NULL AND lvlValue <> "" THEN [1]
  ELSE []
END |
MERGE (lev:Level {name: lvlValue})
MERGE (t)-[:HAS_LEVEL]->(lev)) /////////////////////////////////////
// Xử lý cột Automation/Orchestration tool
WITH e, autotoolMap, microserviceMap, osMap, databaseMap, cloudMap
UNWIND keys(autotoolMap) AS atName
MERGE (at:AutomationTool {name: atName})
MERGE (e)-[:AUTOTOOL]->(at)
WITH e, at, atName, autotoolMap[atName] AS lvlValue, microserviceMap, osMap, databaseMap, cloudMap
FOREACH (_ IN
CASE
  WHEN lvlValue IS NOT NULL AND lvlValue <> "" THEN [1]
  ELSE []
END |
MERGE (lev:Level {name: lvlValue})
MERGE (at)-[:HAS_LEVEL]->(lev)) /////////////////////////////////////
// Xử lý cột Microservice
WITH e, microserviceMap, osMap, databaseMap, cloudMap
UNWIND keys(microserviceMap) AS msName
MERGE (ms:Microservice {name: msName})
MERGE (e)-[:MICROSERVICE]->(ms)
WITH e, ms, msName, microserviceMap[msName] AS lvlValue, osMap, databaseMap, cloudMap
FOREACH (_ IN
CASE
  WHEN lvlValue IS NOT NULL AND lvlValue <> "" THEN [1]
  ELSE []
END |
MERGE (lev:Level {name: lvlValue})
MERGE (ms)-[:HAS_LEVEL]->(lev)) /////////////////////////////////////
// Xử lý cột OS
WITH e, osMap, databaseMap, cloudMap
UNWIND keys(osMap) AS osName
MERGE (os:OS {name: osName})
MERGE (e)-[:OS]->(os)
WITH e, os, osName, osMap[osName] AS lvlValue, databaseMap, cloudMap
FOREACH (_ IN
CASE
  WHEN lvlValue IS NOT NULL AND lvlValue <> "" THEN [1]
  ELSE []
END |
MERGE (lev:Level {name: lvlValue})
MERGE (os)-[:HAS_LEVEL]->(lev)) /////////////////////////////////////
// Xử lý cột Database
WITH e, databaseMap, cloudMap
UNWIND keys(databaseMap) AS dbName
MERGE (db:Database {name: dbName})
MERGE (e)-[:DATABASE]->(db)
WITH e, db, dbName, databaseMap[dbName] AS lvlValue, cloudMap
FOREACH (_ IN
CASE
  WHEN lvlValue IS NOT NULL AND lvlValue <> "" THEN [1]
  ELSE []
END |
MERGE (lev:Level {name: lvlValue})
MERGE (db)-[:HAS_LEVEL]->(lev)) /////////////////////////////////////
// Xử lý cột Public Cloud
WITH e, cloudMap
UNWIND keys(cloudMap) AS cloudName
MERGE (c:Cloud {name: cloudName})
MERGE (e)-[:CLOUD]->(c)
WITH e, c, cloudName, cloudMap[cloudName] AS lvlValue
FOREACH (_ IN
CASE
  WHEN lvlValue IS NOT NULL AND lvlValue <> "" THEN [1]
  ELSE []
END |
MERGE (lev:Level {name: lvlValue})
MERGE (c)-[:HAS_LEVEL]->(lev))